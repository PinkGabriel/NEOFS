stddef.h中的offsetof(s,m)表示结构体某个成员相对于结构体首地址的偏移量

设对齐字节数为n(n = 1,2,4,8,16),每个成员内存长度为Li,Max(Li)为最大的成员内存长度,字节对齐规则是:
1.       结构体对象的起始地址能够被Max(Li)所整除;
2.       结构体中每个成员相对于起始地址的偏移量,即对齐值应是min(n,Li)的倍数.若不满足对齐值的要求,编译器会在成员之间填充若干个字节;
3.       结构体的总长度值应是min(n,Max)(Li)的倍数,若不满足总长度值的要求,编译器在为最后一个成员分配空间后,会在其后填充若干个字节.
使用伪指令#pragma pack (n)，C编译器将按照n个字节对齐。
使用伪指令#pragma pack ()，取消自定义字节对齐方式。
另外，还有如下的一种方式：
 __attribute((aligned (n)))，让所作用的结构成员对齐在n字节自然边界上。如果结构中有成员的长度大于n，则按照最大成员的长度来对齐。
 __attribute__ ((packed))，取消结构在编译过程中的优化对齐，按照实际占用字节数进行对齐。
!!! __attribute((aligned (n))) 设置的是结构体起始地址的对齐，然后结构体的总大小是n的整数倍，而各个成员的对齐还是#pragma pack (n)管

总的来说还是用#pragma pack (n)吧...
